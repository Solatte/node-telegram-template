// source: protos/anomaly.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.solom.ActionMap', null, global);
goog.exportSymbol('proto.solom.AmmId', null, global);
goog.exportSymbol('proto.solom.Boolean', null, global);
goog.exportSymbol('proto.solom.CheckVolumeArgs', null, global);
goog.exportSymbol('proto.solom.GetOHLCPriceAllWindowArgs', null, global);
goog.exportSymbol('proto.solom.Mint', null, global);
goog.exportSymbol('proto.solom.OHLC', null, global);
goog.exportSymbol('proto.solom.OHLCPriceAllWindow', null, global);
goog.exportSymbol('proto.solom.PriceAllWindow', null, global);
goog.exportSymbol('proto.solom.SubscribeRequest', null, global);
goog.exportSymbol('proto.solom.SubscribeRequestFilterOHLC', null, global);
goog.exportSymbol('proto.solom.SubscribeRequestFilterPumpFun', null, global);
goog.exportSymbol('proto.solom.SubscribeRequestFilterSolBalance', null, global);
goog.exportSymbol('proto.solom.SubscribeRequestFilterTransactionFilter', null, global);
goog.exportSymbol('proto.solom.SubscribeUpdate', null, global);
goog.exportSymbol('proto.solom.VolumeAllWindow', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.SubscribeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solom.SubscribeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.SubscribeRequest.displayName = 'proto.solom.SubscribeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.SubscribeRequestFilterSolBalance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solom.SubscribeRequestFilterSolBalance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.SubscribeRequestFilterSolBalance.displayName = 'proto.solom.SubscribeRequestFilterSolBalance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.SubscribeRequestFilterPumpFun = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solom.SubscribeRequestFilterPumpFun, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.SubscribeRequestFilterPumpFun.displayName = 'proto.solom.SubscribeRequestFilterPumpFun';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.SubscribeRequestFilterTransactionFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.solom.SubscribeRequestFilterTransactionFilter.repeatedFields_, null);
};
goog.inherits(proto.solom.SubscribeRequestFilterTransactionFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.SubscribeRequestFilterTransactionFilter.displayName = 'proto.solom.SubscribeRequestFilterTransactionFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.SubscribeRequestFilterOHLC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solom.SubscribeRequestFilterOHLC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.SubscribeRequestFilterOHLC.displayName = 'proto.solom.SubscribeRequestFilterOHLC';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.SubscribeUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solom.SubscribeUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.SubscribeUpdate.displayName = 'proto.solom.SubscribeUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.AmmId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solom.AmmId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.AmmId.displayName = 'proto.solom.AmmId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.Mint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solom.Mint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.Mint.displayName = 'proto.solom.Mint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.Boolean = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solom.Boolean, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.Boolean.displayName = 'proto.solom.Boolean';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.PriceAllWindow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solom.PriceAllWindow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.PriceAllWindow.displayName = 'proto.solom.PriceAllWindow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.ActionMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solom.ActionMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.ActionMap.displayName = 'proto.solom.ActionMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.VolumeAllWindow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solom.VolumeAllWindow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.VolumeAllWindow.displayName = 'proto.solom.VolumeAllWindow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.GetOHLCPriceAllWindowArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solom.GetOHLCPriceAllWindowArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.GetOHLCPriceAllWindowArgs.displayName = 'proto.solom.GetOHLCPriceAllWindowArgs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.OHLCPriceAllWindow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solom.OHLCPriceAllWindow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.OHLCPriceAllWindow.displayName = 'proto.solom.OHLCPriceAllWindow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.OHLC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solom.OHLC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.OHLC.displayName = 'proto.solom.OHLC';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.CheckVolumeArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.solom.CheckVolumeArgs.repeatedFields_, null);
};
goog.inherits(proto.solom.CheckVolumeArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.CheckVolumeArgs.displayName = 'proto.solom.CheckVolumeArgs';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.SubscribeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.SubscribeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.SubscribeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.SubscribeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    solBalance: (f = msg.getSolBalance()) && proto.solom.SubscribeRequestFilterSolBalance.toObject(includeInstance, f),
    pumpfun: (f = msg.getPumpfun()) && proto.solom.SubscribeRequestFilterPumpFun.toObject(includeInstance, f),
    transaction: (f = msg.getTransaction()) && proto.solom.SubscribeRequestFilterTransactionFilter.toObject(includeInstance, f),
    source: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.SubscribeRequest}
 */
proto.solom.SubscribeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.SubscribeRequest;
  return proto.solom.SubscribeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.SubscribeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.SubscribeRequest}
 */
proto.solom.SubscribeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.solom.SubscribeRequestFilterSolBalance;
      reader.readMessage(value,proto.solom.SubscribeRequestFilterSolBalance.deserializeBinaryFromReader);
      msg.setSolBalance(value);
      break;
    case 2:
      var value = new proto.solom.SubscribeRequestFilterPumpFun;
      reader.readMessage(value,proto.solom.SubscribeRequestFilterPumpFun.deserializeBinaryFromReader);
      msg.setPumpfun(value);
      break;
    case 3:
      var value = new proto.solom.SubscribeRequestFilterTransactionFilter;
      reader.readMessage(value,proto.solom.SubscribeRequestFilterTransactionFilter.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.SubscribeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.SubscribeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.SubscribeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.SubscribeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSolBalance();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.solom.SubscribeRequestFilterSolBalance.serializeBinaryToWriter
    );
  }
  f = message.getPumpfun();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.solom.SubscribeRequestFilterPumpFun.serializeBinaryToWriter
    );
  }
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.solom.SubscribeRequestFilterTransactionFilter.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional SubscribeRequestFilterSolBalance sol_balance = 1;
 * @return {?proto.solom.SubscribeRequestFilterSolBalance}
 */
proto.solom.SubscribeRequest.prototype.getSolBalance = function() {
  return /** @type{?proto.solom.SubscribeRequestFilterSolBalance} */ (
    jspb.Message.getWrapperField(this, proto.solom.SubscribeRequestFilterSolBalance, 1));
};


/**
 * @param {?proto.solom.SubscribeRequestFilterSolBalance|undefined} value
 * @return {!proto.solom.SubscribeRequest} returns this
*/
proto.solom.SubscribeRequest.prototype.setSolBalance = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.solom.SubscribeRequest} returns this
 */
proto.solom.SubscribeRequest.prototype.clearSolBalance = function() {
  return this.setSolBalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.solom.SubscribeRequest.prototype.hasSolBalance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SubscribeRequestFilterPumpFun pumpfun = 2;
 * @return {?proto.solom.SubscribeRequestFilterPumpFun}
 */
proto.solom.SubscribeRequest.prototype.getPumpfun = function() {
  return /** @type{?proto.solom.SubscribeRequestFilterPumpFun} */ (
    jspb.Message.getWrapperField(this, proto.solom.SubscribeRequestFilterPumpFun, 2));
};


/**
 * @param {?proto.solom.SubscribeRequestFilterPumpFun|undefined} value
 * @return {!proto.solom.SubscribeRequest} returns this
*/
proto.solom.SubscribeRequest.prototype.setPumpfun = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.solom.SubscribeRequest} returns this
 */
proto.solom.SubscribeRequest.prototype.clearPumpfun = function() {
  return this.setPumpfun(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.solom.SubscribeRequest.prototype.hasPumpfun = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SubscribeRequestFilterTransactionFilter transaction = 3;
 * @return {?proto.solom.SubscribeRequestFilterTransactionFilter}
 */
proto.solom.SubscribeRequest.prototype.getTransaction = function() {
  return /** @type{?proto.solom.SubscribeRequestFilterTransactionFilter} */ (
    jspb.Message.getWrapperField(this, proto.solom.SubscribeRequestFilterTransactionFilter, 3));
};


/**
 * @param {?proto.solom.SubscribeRequestFilterTransactionFilter|undefined} value
 * @return {!proto.solom.SubscribeRequest} returns this
*/
proto.solom.SubscribeRequest.prototype.setTransaction = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.solom.SubscribeRequest} returns this
 */
proto.solom.SubscribeRequest.prototype.clearTransaction = function() {
  return this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.solom.SubscribeRequest.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string source = 4;
 * @return {string}
 */
proto.solom.SubscribeRequest.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.solom.SubscribeRequest} returns this
 */
proto.solom.SubscribeRequest.prototype.setSource = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.solom.SubscribeRequest} returns this
 */
proto.solom.SubscribeRequest.prototype.clearSource = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.solom.SubscribeRequest.prototype.hasSource = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.SubscribeRequestFilterSolBalance.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.SubscribeRequestFilterSolBalance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.SubscribeRequestFilterSolBalance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.SubscribeRequestFilterSolBalance.toObject = function(includeInstance, msg) {
  var f, obj = {
    min: jspb.Message.getFieldWithDefault(msg, 1, 0),
    max: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.SubscribeRequestFilterSolBalance}
 */
proto.solom.SubscribeRequestFilterSolBalance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.SubscribeRequestFilterSolBalance;
  return proto.solom.SubscribeRequestFilterSolBalance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.SubscribeRequestFilterSolBalance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.SubscribeRequestFilterSolBalance}
 */
proto.solom.SubscribeRequestFilterSolBalance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.SubscribeRequestFilterSolBalance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.SubscribeRequestFilterSolBalance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.SubscribeRequestFilterSolBalance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.SubscribeRequestFilterSolBalance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 min = 1;
 * @return {number}
 */
proto.solom.SubscribeRequestFilterSolBalance.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.solom.SubscribeRequestFilterSolBalance} returns this
 */
proto.solom.SubscribeRequestFilterSolBalance.prototype.setMin = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.solom.SubscribeRequestFilterSolBalance} returns this
 */
proto.solom.SubscribeRequestFilterSolBalance.prototype.clearMin = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.solom.SubscribeRequestFilterSolBalance.prototype.hasMin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 max = 2;
 * @return {number}
 */
proto.solom.SubscribeRequestFilterSolBalance.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.solom.SubscribeRequestFilterSolBalance} returns this
 */
proto.solom.SubscribeRequestFilterSolBalance.prototype.setMax = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.solom.SubscribeRequestFilterSolBalance} returns this
 */
proto.solom.SubscribeRequestFilterSolBalance.prototype.clearMax = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.solom.SubscribeRequestFilterSolBalance.prototype.hasMax = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.SubscribeRequestFilterPumpFun.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.SubscribeRequestFilterPumpFun.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.SubscribeRequestFilterPumpFun} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.SubscribeRequestFilterPumpFun.toObject = function(includeInstance, msg) {
  var f, obj = {
    isPumpfun: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.SubscribeRequestFilterPumpFun}
 */
proto.solom.SubscribeRequestFilterPumpFun.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.SubscribeRequestFilterPumpFun;
  return proto.solom.SubscribeRequestFilterPumpFun.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.SubscribeRequestFilterPumpFun} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.SubscribeRequestFilterPumpFun}
 */
proto.solom.SubscribeRequestFilterPumpFun.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPumpfun(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.SubscribeRequestFilterPumpFun.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.SubscribeRequestFilterPumpFun.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.SubscribeRequestFilterPumpFun} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.SubscribeRequestFilterPumpFun.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool is_pumpfun = 1;
 * @return {boolean}
 */
proto.solom.SubscribeRequestFilterPumpFun.prototype.getIsPumpfun = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.solom.SubscribeRequestFilterPumpFun} returns this
 */
proto.solom.SubscribeRequestFilterPumpFun.prototype.setIsPumpfun = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.solom.SubscribeRequestFilterPumpFun} returns this
 */
proto.solom.SubscribeRequestFilterPumpFun.prototype.clearIsPumpfun = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.solom.SubscribeRequestFilterPumpFun.prototype.hasIsPumpfun = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.solom.SubscribeRequestFilterTransactionFilter.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.SubscribeRequestFilterTransactionFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.SubscribeRequestFilterTransactionFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.SubscribeRequestFilterTransactionFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.SubscribeRequestFilterTransactionFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    mintList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    signerList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    min: jspb.Message.getFieldWithDefault(msg, 3, 0),
    max: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.SubscribeRequestFilterTransactionFilter}
 */
proto.solom.SubscribeRequestFilterTransactionFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.SubscribeRequestFilterTransactionFilter;
  return proto.solom.SubscribeRequestFilterTransactionFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.SubscribeRequestFilterTransactionFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.SubscribeRequestFilterTransactionFilter}
 */
proto.solom.SubscribeRequestFilterTransactionFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addMint(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSigner(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.SubscribeRequestFilterTransactionFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.SubscribeRequestFilterTransactionFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.SubscribeRequestFilterTransactionFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.SubscribeRequestFilterTransactionFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMintList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getSignerList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * repeated string mint = 1;
 * @return {!Array<string>}
 */
proto.solom.SubscribeRequestFilterTransactionFilter.prototype.getMintList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.solom.SubscribeRequestFilterTransactionFilter} returns this
 */
proto.solom.SubscribeRequestFilterTransactionFilter.prototype.setMintList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.solom.SubscribeRequestFilterTransactionFilter} returns this
 */
proto.solom.SubscribeRequestFilterTransactionFilter.prototype.addMint = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.solom.SubscribeRequestFilterTransactionFilter} returns this
 */
proto.solom.SubscribeRequestFilterTransactionFilter.prototype.clearMintList = function() {
  return this.setMintList([]);
};


/**
 * repeated string signer = 2;
 * @return {!Array<string>}
 */
proto.solom.SubscribeRequestFilterTransactionFilter.prototype.getSignerList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.solom.SubscribeRequestFilterTransactionFilter} returns this
 */
proto.solom.SubscribeRequestFilterTransactionFilter.prototype.setSignerList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.solom.SubscribeRequestFilterTransactionFilter} returns this
 */
proto.solom.SubscribeRequestFilterTransactionFilter.prototype.addSigner = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.solom.SubscribeRequestFilterTransactionFilter} returns this
 */
proto.solom.SubscribeRequestFilterTransactionFilter.prototype.clearSignerList = function() {
  return this.setSignerList([]);
};


/**
 * optional uint64 min = 3;
 * @return {number}
 */
proto.solom.SubscribeRequestFilterTransactionFilter.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.solom.SubscribeRequestFilterTransactionFilter} returns this
 */
proto.solom.SubscribeRequestFilterTransactionFilter.prototype.setMin = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.solom.SubscribeRequestFilterTransactionFilter} returns this
 */
proto.solom.SubscribeRequestFilterTransactionFilter.prototype.clearMin = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.solom.SubscribeRequestFilterTransactionFilter.prototype.hasMin = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 max = 4;
 * @return {number}
 */
proto.solom.SubscribeRequestFilterTransactionFilter.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.solom.SubscribeRequestFilterTransactionFilter} returns this
 */
proto.solom.SubscribeRequestFilterTransactionFilter.prototype.setMax = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.solom.SubscribeRequestFilterTransactionFilter} returns this
 */
proto.solom.SubscribeRequestFilterTransactionFilter.prototype.clearMax = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.solom.SubscribeRequestFilterTransactionFilter.prototype.hasMax = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.SubscribeRequestFilterOHLC.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.SubscribeRequestFilterOHLC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.SubscribeRequestFilterOHLC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.SubscribeRequestFilterOHLC.toObject = function(includeInstance, msg) {
  var f, obj = {
    ammId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timeInterval: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.SubscribeRequestFilterOHLC}
 */
proto.solom.SubscribeRequestFilterOHLC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.SubscribeRequestFilterOHLC;
  return proto.solom.SubscribeRequestFilterOHLC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.SubscribeRequestFilterOHLC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.SubscribeRequestFilterOHLC}
 */
proto.solom.SubscribeRequestFilterOHLC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmmId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.SubscribeRequestFilterOHLC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.SubscribeRequestFilterOHLC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.SubscribeRequestFilterOHLC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.SubscribeRequestFilterOHLC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmmId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimeInterval();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string amm_id = 1;
 * @return {string}
 */
proto.solom.SubscribeRequestFilterOHLC.prototype.getAmmId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.solom.SubscribeRequestFilterOHLC} returns this
 */
proto.solom.SubscribeRequestFilterOHLC.prototype.setAmmId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 time_interval = 2;
 * @return {number}
 */
proto.solom.SubscribeRequestFilterOHLC.prototype.getTimeInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.solom.SubscribeRequestFilterOHLC} returns this
 */
proto.solom.SubscribeRequestFilterOHLC.prototype.setTimeInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.SubscribeUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.SubscribeUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.SubscribeUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.SubscribeUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    dex: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ammId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mint: jspb.Message.getFieldWithDefault(msg, 3, ""),
    signature: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.SubscribeUpdate}
 */
proto.solom.SubscribeUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.SubscribeUpdate;
  return proto.solom.SubscribeUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.SubscribeUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.SubscribeUpdate}
 */
proto.solom.SubscribeUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmmId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMint(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.SubscribeUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.SubscribeUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.SubscribeUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.SubscribeUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDex();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmmId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMint();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string dex = 1;
 * @return {string}
 */
proto.solom.SubscribeUpdate.prototype.getDex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.solom.SubscribeUpdate} returns this
 */
proto.solom.SubscribeUpdate.prototype.setDex = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string amm_id = 2;
 * @return {string}
 */
proto.solom.SubscribeUpdate.prototype.getAmmId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.solom.SubscribeUpdate} returns this
 */
proto.solom.SubscribeUpdate.prototype.setAmmId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string mint = 3;
 * @return {string}
 */
proto.solom.SubscribeUpdate.prototype.getMint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.solom.SubscribeUpdate} returns this
 */
proto.solom.SubscribeUpdate.prototype.setMint = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string signature = 4;
 * @return {string}
 */
proto.solom.SubscribeUpdate.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.solom.SubscribeUpdate} returns this
 */
proto.solom.SubscribeUpdate.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.AmmId.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.AmmId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.AmmId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.AmmId.toObject = function(includeInstance, msg) {
  var f, obj = {
    ammId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.AmmId}
 */
proto.solom.AmmId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.AmmId;
  return proto.solom.AmmId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.AmmId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.AmmId}
 */
proto.solom.AmmId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmmId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.AmmId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.AmmId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.AmmId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.AmmId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmmId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string amm_id = 1;
 * @return {string}
 */
proto.solom.AmmId.prototype.getAmmId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.solom.AmmId} returns this
 */
proto.solom.AmmId.prototype.setAmmId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.Mint.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.Mint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.Mint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.Mint.toObject = function(includeInstance, msg) {
  var f, obj = {
    mint: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.Mint}
 */
proto.solom.Mint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.Mint;
  return proto.solom.Mint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.Mint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.Mint}
 */
proto.solom.Mint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.Mint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.Mint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.Mint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.Mint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMint();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string mint = 1;
 * @return {string}
 */
proto.solom.Mint.prototype.getMint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.solom.Mint} returns this
 */
proto.solom.Mint.prototype.setMint = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.Boolean.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.Boolean.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.Boolean} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.Boolean.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.Boolean}
 */
proto.solom.Boolean.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.Boolean;
  return proto.solom.Boolean.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.Boolean} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.Boolean}
 */
proto.solom.Boolean.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.Boolean.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.Boolean.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.Boolean} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.Boolean.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool value = 1;
 * @return {boolean}
 */
proto.solom.Boolean.prototype.getValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.solom.Boolean} returns this
 */
proto.solom.Boolean.prototype.setValue = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.PriceAllWindow.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.PriceAllWindow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.PriceAllWindow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.PriceAllWindow.toObject = function(includeInstance, msg) {
  var f, obj = {
    priceMap: (f = msg.getPriceMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.PriceAllWindow}
 */
proto.solom.PriceAllWindow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.PriceAllWindow;
  return proto.solom.PriceAllWindow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.PriceAllWindow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.PriceAllWindow}
 */
proto.solom.PriceAllWindow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getPriceMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readDouble, null, 0, 0.0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.PriceAllWindow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.PriceAllWindow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.PriceAllWindow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.PriceAllWindow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPriceMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeDouble);
  }
};


/**
 * map<int32, double> price = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.solom.PriceAllWindow.prototype.getPriceMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.solom.PriceAllWindow} returns this
 */
proto.solom.PriceAllWindow.prototype.clearPriceMap = function() {
  this.getPriceMap().clear();
  return this;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.ActionMap.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.ActionMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.ActionMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.ActionMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    volumeMap: (f = msg.getVolumeMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.ActionMap}
 */
proto.solom.ActionMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.ActionMap;
  return proto.solom.ActionMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.ActionMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.ActionMap}
 */
proto.solom.ActionMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getVolumeMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt64, null, "", 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.ActionMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.ActionMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.ActionMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.ActionMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVolumeMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt64);
  }
};


/**
 * map<string, int64> volume = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.solom.ActionMap.prototype.getVolumeMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.solom.ActionMap} returns this
 */
proto.solom.ActionMap.prototype.clearVolumeMap = function() {
  this.getVolumeMap().clear();
  return this;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.VolumeAllWindow.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.VolumeAllWindow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.VolumeAllWindow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.VolumeAllWindow.toObject = function(includeInstance, msg) {
  var f, obj = {
    volumeMap: (f = msg.getVolumeMap()) ? f.toObject(includeInstance, proto.solom.ActionMap.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.VolumeAllWindow}
 */
proto.solom.VolumeAllWindow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.VolumeAllWindow;
  return proto.solom.VolumeAllWindow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.VolumeAllWindow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.VolumeAllWindow}
 */
proto.solom.VolumeAllWindow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getVolumeMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.solom.ActionMap.deserializeBinaryFromReader, "", new proto.solom.ActionMap());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.VolumeAllWindow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.VolumeAllWindow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.VolumeAllWindow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.VolumeAllWindow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVolumeMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.solom.ActionMap.serializeBinaryToWriter);
  }
};


/**
 * map<string, ActionMap> volume = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.solom.ActionMap>}
 */
proto.solom.VolumeAllWindow.prototype.getVolumeMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.solom.ActionMap>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.solom.ActionMap));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.solom.VolumeAllWindow} returns this
 */
proto.solom.VolumeAllWindow.prototype.clearVolumeMap = function() {
  this.getVolumeMap().clear();
  return this;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.GetOHLCPriceAllWindowArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.GetOHLCPriceAllWindowArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.GetOHLCPriceAllWindowArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.GetOHLCPriceAllWindowArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    mint: jspb.Message.getFieldWithDefault(msg, 1, ""),
    duration: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.GetOHLCPriceAllWindowArgs}
 */
proto.solom.GetOHLCPriceAllWindowArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.GetOHLCPriceAllWindowArgs;
  return proto.solom.GetOHLCPriceAllWindowArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.GetOHLCPriceAllWindowArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.GetOHLCPriceAllWindowArgs}
 */
proto.solom.GetOHLCPriceAllWindowArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMint(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.GetOHLCPriceAllWindowArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.GetOHLCPriceAllWindowArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.GetOHLCPriceAllWindowArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.GetOHLCPriceAllWindowArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMint();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string mint = 1;
 * @return {string}
 */
proto.solom.GetOHLCPriceAllWindowArgs.prototype.getMint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.solom.GetOHLCPriceAllWindowArgs} returns this
 */
proto.solom.GetOHLCPriceAllWindowArgs.prototype.setMint = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 duration = 2;
 * @return {number}
 */
proto.solom.GetOHLCPriceAllWindowArgs.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.solom.GetOHLCPriceAllWindowArgs} returns this
 */
proto.solom.GetOHLCPriceAllWindowArgs.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.OHLCPriceAllWindow.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.OHLCPriceAllWindow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.OHLCPriceAllWindow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.OHLCPriceAllWindow.toObject = function(includeInstance, msg) {
  var f, obj = {
    priceMap: (f = msg.getPriceMap()) ? f.toObject(includeInstance, proto.solom.OHLC.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.OHLCPriceAllWindow}
 */
proto.solom.OHLCPriceAllWindow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.OHLCPriceAllWindow;
  return proto.solom.OHLCPriceAllWindow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.OHLCPriceAllWindow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.OHLCPriceAllWindow}
 */
proto.solom.OHLCPriceAllWindow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getPriceMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt64, jspb.BinaryReader.prototype.readMessage, proto.solom.OHLC.deserializeBinaryFromReader, 0, new proto.solom.OHLC());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.OHLCPriceAllWindow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.OHLCPriceAllWindow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.OHLCPriceAllWindow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.OHLCPriceAllWindow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPriceMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt64, jspb.BinaryWriter.prototype.writeMessage, proto.solom.OHLC.serializeBinaryToWriter);
  }
};


/**
 * map<int64, OHLC> price = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.solom.OHLC>}
 */
proto.solom.OHLCPriceAllWindow.prototype.getPriceMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.solom.OHLC>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.solom.OHLC));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.solom.OHLCPriceAllWindow} returns this
 */
proto.solom.OHLCPriceAllWindow.prototype.clearPriceMap = function() {
  this.getPriceMap().clear();
  return this;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.OHLC.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.OHLC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.OHLC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.OHLC.toObject = function(includeInstance, msg) {
  var f, obj = {
    open: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    high: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    low: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    close: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.OHLC}
 */
proto.solom.OHLC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.OHLC;
  return proto.solom.OHLC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.OHLC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.OHLC}
 */
proto.solom.OHLC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOpen(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHigh(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLow(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setClose(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.OHLC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.OHLC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.OHLC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.OHLC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpen();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getHigh();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getLow();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getClose();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double open = 1;
 * @return {number}
 */
proto.solom.OHLC.prototype.getOpen = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.solom.OHLC} returns this
 */
proto.solom.OHLC.prototype.setOpen = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double high = 2;
 * @return {number}
 */
proto.solom.OHLC.prototype.getHigh = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.solom.OHLC} returns this
 */
proto.solom.OHLC.prototype.setHigh = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double low = 3;
 * @return {number}
 */
proto.solom.OHLC.prototype.getLow = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.solom.OHLC} returns this
 */
proto.solom.OHLC.prototype.setLow = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double close = 4;
 * @return {number}
 */
proto.solom.OHLC.prototype.getClose = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.solom.OHLC} returns this
 */
proto.solom.OHLC.prototype.setClose = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.solom.CheckVolumeArgs.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.CheckVolumeArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.CheckVolumeArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.CheckVolumeArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.CheckVolumeArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    timeRangeList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    action: jspb.Message.getFieldWithDefault(msg, 2, ""),
    operator: jspb.Message.getFieldWithDefault(msg, 3, ""),
    value: jspb.Message.getFieldWithDefault(msg, 4, 0),
    ammId: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.CheckVolumeArgs}
 */
proto.solom.CheckVolumeArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.CheckVolumeArgs;
  return proto.solom.CheckVolumeArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.CheckVolumeArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.CheckVolumeArgs}
 */
proto.solom.CheckVolumeArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTimeRange(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperator(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValue(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmmId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.CheckVolumeArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.CheckVolumeArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.CheckVolumeArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.CheckVolumeArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimeRangeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getAction();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOperator();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getAmmId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * repeated string time_range = 1;
 * @return {!Array<string>}
 */
proto.solom.CheckVolumeArgs.prototype.getTimeRangeList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.solom.CheckVolumeArgs} returns this
 */
proto.solom.CheckVolumeArgs.prototype.setTimeRangeList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.solom.CheckVolumeArgs} returns this
 */
proto.solom.CheckVolumeArgs.prototype.addTimeRange = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.solom.CheckVolumeArgs} returns this
 */
proto.solom.CheckVolumeArgs.prototype.clearTimeRangeList = function() {
  return this.setTimeRangeList([]);
};


/**
 * optional string action = 2;
 * @return {string}
 */
proto.solom.CheckVolumeArgs.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.solom.CheckVolumeArgs} returns this
 */
proto.solom.CheckVolumeArgs.prototype.setAction = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string operator = 3;
 * @return {string}
 */
proto.solom.CheckVolumeArgs.prototype.getOperator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.solom.CheckVolumeArgs} returns this
 */
proto.solom.CheckVolumeArgs.prototype.setOperator = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 value = 4;
 * @return {number}
 */
proto.solom.CheckVolumeArgs.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.solom.CheckVolumeArgs} returns this
 */
proto.solom.CheckVolumeArgs.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string amm_id = 5;
 * @return {string}
 */
proto.solom.CheckVolumeArgs.prototype.getAmmId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.solom.CheckVolumeArgs} returns this
 */
proto.solom.CheckVolumeArgs.prototype.setAmmId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


goog.object.extend(exports, proto.solom);
