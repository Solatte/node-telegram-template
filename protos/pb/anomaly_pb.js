// source: anomaly.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.solom.OHLC', null, global);
goog.exportSymbol('proto.solom.SubscribeRequest', null, global);
goog.exportSymbol('proto.solom.SubscribeRequestFilterOHLC', null, global);
goog.exportSymbol('proto.solom.SubscribeRequestFilterVolume', null, global);
goog.exportSymbol('proto.solom.SubscribeRequestFilterVolume.ConditionCase', null, global);
goog.exportSymbol('proto.solom.SubscribeUpdate', null, global);
goog.exportSymbol('proto.solom.SubscribeUpdate.UpdateOneofCase', null, global);
goog.exportSymbol('proto.solom.SubscribeUpdateOHLC', null, global);
goog.exportSymbol('proto.solom.SubscribeUpdateVolume', null, global);
goog.exportSymbol('proto.solom.VolumeAbove', null, global);
goog.exportSymbol('proto.solom.VolumeBelow', null, global);
goog.exportSymbol('proto.solom.VolumeBetween', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.SubscribeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solom.SubscribeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.SubscribeRequest.displayName = 'proto.solom.SubscribeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.SubscribeRequestFilterVolume = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.solom.SubscribeRequestFilterVolume.oneofGroups_);
};
goog.inherits(proto.solom.SubscribeRequestFilterVolume, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.SubscribeRequestFilterVolume.displayName = 'proto.solom.SubscribeRequestFilterVolume';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.SubscribeRequestFilterOHLC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solom.SubscribeRequestFilterOHLC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.SubscribeRequestFilterOHLC.displayName = 'proto.solom.SubscribeRequestFilterOHLC';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.VolumeAbove = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solom.VolumeAbove, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.VolumeAbove.displayName = 'proto.solom.VolumeAbove';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.VolumeBelow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solom.VolumeBelow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.VolumeBelow.displayName = 'proto.solom.VolumeBelow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.VolumeBetween = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solom.VolumeBetween, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.VolumeBetween.displayName = 'proto.solom.VolumeBetween';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.SubscribeUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.solom.SubscribeUpdate.oneofGroups_);
};
goog.inherits(proto.solom.SubscribeUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.SubscribeUpdate.displayName = 'proto.solom.SubscribeUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.SubscribeUpdateVolume = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solom.SubscribeUpdateVolume, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.SubscribeUpdateVolume.displayName = 'proto.solom.SubscribeUpdateVolume';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.SubscribeUpdateOHLC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solom.SubscribeUpdateOHLC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.SubscribeUpdateOHLC.displayName = 'proto.solom.SubscribeUpdateOHLC';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.solom.OHLC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.solom.OHLC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.solom.OHLC.displayName = 'proto.solom.OHLC';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.SubscribeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.SubscribeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.SubscribeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.SubscribeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getFieldWithDefault(msg, 1, ""),
    volume: (f = msg.getVolume()) && proto.solom.SubscribeRequestFilterVolume.toObject(includeInstance, f),
    ohlc: (f = msg.getOhlc()) && proto.solom.SubscribeRequestFilterOHLC.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.SubscribeRequest}
 */
proto.solom.SubscribeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.SubscribeRequest;
  return proto.solom.SubscribeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.SubscribeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.SubscribeRequest}
 */
proto.solom.SubscribeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = new proto.solom.SubscribeRequestFilterVolume;
      reader.readMessage(value,proto.solom.SubscribeRequestFilterVolume.deserializeBinaryFromReader);
      msg.setVolume(value);
      break;
    case 3:
      var value = new proto.solom.SubscribeRequestFilterOHLC;
      reader.readMessage(value,proto.solom.SubscribeRequestFilterOHLC.deserializeBinaryFromReader);
      msg.setOhlc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.SubscribeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.SubscribeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.SubscribeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.SubscribeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVolume();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.solom.SubscribeRequestFilterVolume.serializeBinaryToWriter
    );
  }
  f = message.getOhlc();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.solom.SubscribeRequestFilterOHLC.serializeBinaryToWriter
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.solom.SubscribeRequest.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.solom.SubscribeRequest} returns this
 */
proto.solom.SubscribeRequest.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SubscribeRequestFilterVolume volume = 2;
 * @return {?proto.solom.SubscribeRequestFilterVolume}
 */
proto.solom.SubscribeRequest.prototype.getVolume = function() {
  return /** @type{?proto.solom.SubscribeRequestFilterVolume} */ (
    jspb.Message.getWrapperField(this, proto.solom.SubscribeRequestFilterVolume, 2));
};


/**
 * @param {?proto.solom.SubscribeRequestFilterVolume|undefined} value
 * @return {!proto.solom.SubscribeRequest} returns this
*/
proto.solom.SubscribeRequest.prototype.setVolume = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.solom.SubscribeRequest} returns this
 */
proto.solom.SubscribeRequest.prototype.clearVolume = function() {
  return this.setVolume(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.solom.SubscribeRequest.prototype.hasVolume = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SubscribeRequestFilterOHLC ohlc = 3;
 * @return {?proto.solom.SubscribeRequestFilterOHLC}
 */
proto.solom.SubscribeRequest.prototype.getOhlc = function() {
  return /** @type{?proto.solom.SubscribeRequestFilterOHLC} */ (
    jspb.Message.getWrapperField(this, proto.solom.SubscribeRequestFilterOHLC, 3));
};


/**
 * @param {?proto.solom.SubscribeRequestFilterOHLC|undefined} value
 * @return {!proto.solom.SubscribeRequest} returns this
*/
proto.solom.SubscribeRequest.prototype.setOhlc = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.solom.SubscribeRequest} returns this
 */
proto.solom.SubscribeRequest.prototype.clearOhlc = function() {
  return this.setOhlc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.solom.SubscribeRequest.prototype.hasOhlc = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.solom.SubscribeRequestFilterVolume.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.solom.SubscribeRequestFilterVolume.ConditionCase = {
  CONDITION_NOT_SET: 0,
  ABOVE: 1,
  BELOW: 2,
  BETWEEN: 3
};

/**
 * @return {proto.solom.SubscribeRequestFilterVolume.ConditionCase}
 */
proto.solom.SubscribeRequestFilterVolume.prototype.getConditionCase = function() {
  return /** @type {proto.solom.SubscribeRequestFilterVolume.ConditionCase} */(jspb.Message.computeOneofCase(this, proto.solom.SubscribeRequestFilterVolume.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.SubscribeRequestFilterVolume.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.SubscribeRequestFilterVolume.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.SubscribeRequestFilterVolume} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.SubscribeRequestFilterVolume.toObject = function(includeInstance, msg) {
  var f, obj = {
    above: (f = msg.getAbove()) && proto.solom.VolumeAbove.toObject(includeInstance, f),
    below: (f = msg.getBelow()) && proto.solom.VolumeBelow.toObject(includeInstance, f),
    between: (f = msg.getBetween()) && proto.solom.VolumeBetween.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.SubscribeRequestFilterVolume}
 */
proto.solom.SubscribeRequestFilterVolume.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.SubscribeRequestFilterVolume;
  return proto.solom.SubscribeRequestFilterVolume.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.SubscribeRequestFilterVolume} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.SubscribeRequestFilterVolume}
 */
proto.solom.SubscribeRequestFilterVolume.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.solom.VolumeAbove;
      reader.readMessage(value,proto.solom.VolumeAbove.deserializeBinaryFromReader);
      msg.setAbove(value);
      break;
    case 2:
      var value = new proto.solom.VolumeBelow;
      reader.readMessage(value,proto.solom.VolumeBelow.deserializeBinaryFromReader);
      msg.setBelow(value);
      break;
    case 3:
      var value = new proto.solom.VolumeBetween;
      reader.readMessage(value,proto.solom.VolumeBetween.deserializeBinaryFromReader);
      msg.setBetween(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.SubscribeRequestFilterVolume.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.SubscribeRequestFilterVolume.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.SubscribeRequestFilterVolume} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.SubscribeRequestFilterVolume.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAbove();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.solom.VolumeAbove.serializeBinaryToWriter
    );
  }
  f = message.getBelow();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.solom.VolumeBelow.serializeBinaryToWriter
    );
  }
  f = message.getBetween();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.solom.VolumeBetween.serializeBinaryToWriter
    );
  }
};


/**
 * optional VolumeAbove above = 1;
 * @return {?proto.solom.VolumeAbove}
 */
proto.solom.SubscribeRequestFilterVolume.prototype.getAbove = function() {
  return /** @type{?proto.solom.VolumeAbove} */ (
    jspb.Message.getWrapperField(this, proto.solom.VolumeAbove, 1));
};


/**
 * @param {?proto.solom.VolumeAbove|undefined} value
 * @return {!proto.solom.SubscribeRequestFilterVolume} returns this
*/
proto.solom.SubscribeRequestFilterVolume.prototype.setAbove = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.solom.SubscribeRequestFilterVolume.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.solom.SubscribeRequestFilterVolume} returns this
 */
proto.solom.SubscribeRequestFilterVolume.prototype.clearAbove = function() {
  return this.setAbove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.solom.SubscribeRequestFilterVolume.prototype.hasAbove = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VolumeBelow below = 2;
 * @return {?proto.solom.VolumeBelow}
 */
proto.solom.SubscribeRequestFilterVolume.prototype.getBelow = function() {
  return /** @type{?proto.solom.VolumeBelow} */ (
    jspb.Message.getWrapperField(this, proto.solom.VolumeBelow, 2));
};


/**
 * @param {?proto.solom.VolumeBelow|undefined} value
 * @return {!proto.solom.SubscribeRequestFilterVolume} returns this
*/
proto.solom.SubscribeRequestFilterVolume.prototype.setBelow = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.solom.SubscribeRequestFilterVolume.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.solom.SubscribeRequestFilterVolume} returns this
 */
proto.solom.SubscribeRequestFilterVolume.prototype.clearBelow = function() {
  return this.setBelow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.solom.SubscribeRequestFilterVolume.prototype.hasBelow = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional VolumeBetween between = 3;
 * @return {?proto.solom.VolumeBetween}
 */
proto.solom.SubscribeRequestFilterVolume.prototype.getBetween = function() {
  return /** @type{?proto.solom.VolumeBetween} */ (
    jspb.Message.getWrapperField(this, proto.solom.VolumeBetween, 3));
};


/**
 * @param {?proto.solom.VolumeBetween|undefined} value
 * @return {!proto.solom.SubscribeRequestFilterVolume} returns this
*/
proto.solom.SubscribeRequestFilterVolume.prototype.setBetween = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.solom.SubscribeRequestFilterVolume.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.solom.SubscribeRequestFilterVolume} returns this
 */
proto.solom.SubscribeRequestFilterVolume.prototype.clearBetween = function() {
  return this.setBetween(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.solom.SubscribeRequestFilterVolume.prototype.hasBetween = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.SubscribeRequestFilterOHLC.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.SubscribeRequestFilterOHLC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.SubscribeRequestFilterOHLC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.SubscribeRequestFilterOHLC.toObject = function(includeInstance, msg) {
  var f, obj = {
    ammId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timeInterval: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.SubscribeRequestFilterOHLC}
 */
proto.solom.SubscribeRequestFilterOHLC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.SubscribeRequestFilterOHLC;
  return proto.solom.SubscribeRequestFilterOHLC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.SubscribeRequestFilterOHLC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.SubscribeRequestFilterOHLC}
 */
proto.solom.SubscribeRequestFilterOHLC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmmId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.SubscribeRequestFilterOHLC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.SubscribeRequestFilterOHLC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.SubscribeRequestFilterOHLC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.SubscribeRequestFilterOHLC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmmId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimeInterval();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string amm_id = 1;
 * @return {string}
 */
proto.solom.SubscribeRequestFilterOHLC.prototype.getAmmId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.solom.SubscribeRequestFilterOHLC} returns this
 */
proto.solom.SubscribeRequestFilterOHLC.prototype.setAmmId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 time_interval = 2;
 * @return {number}
 */
proto.solom.SubscribeRequestFilterOHLC.prototype.getTimeInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.solom.SubscribeRequestFilterOHLC} returns this
 */
proto.solom.SubscribeRequestFilterOHLC.prototype.setTimeInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.VolumeAbove.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.VolumeAbove.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.VolumeAbove} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.VolumeAbove.toObject = function(includeInstance, msg) {
  var f, obj = {
    threshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.VolumeAbove}
 */
proto.solom.VolumeAbove.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.VolumeAbove;
  return proto.solom.VolumeAbove.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.VolumeAbove} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.VolumeAbove}
 */
proto.solom.VolumeAbove.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setThreshold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.VolumeAbove.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.VolumeAbove.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.VolumeAbove} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.VolumeAbove.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreshold();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float threshold = 1;
 * @return {number}
 */
proto.solom.VolumeAbove.prototype.getThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.solom.VolumeAbove} returns this
 */
proto.solom.VolumeAbove.prototype.setThreshold = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.VolumeBelow.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.VolumeBelow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.VolumeBelow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.VolumeBelow.toObject = function(includeInstance, msg) {
  var f, obj = {
    threshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.VolumeBelow}
 */
proto.solom.VolumeBelow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.VolumeBelow;
  return proto.solom.VolumeBelow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.VolumeBelow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.VolumeBelow}
 */
proto.solom.VolumeBelow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setThreshold(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.VolumeBelow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.VolumeBelow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.VolumeBelow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.VolumeBelow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreshold();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float threshold = 1;
 * @return {number}
 */
proto.solom.VolumeBelow.prototype.getThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.solom.VolumeBelow} returns this
 */
proto.solom.VolumeBelow.prototype.setThreshold = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.VolumeBetween.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.VolumeBetween.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.VolumeBetween} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.VolumeBetween.toObject = function(includeInstance, msg) {
  var f, obj = {
    min: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    max: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.VolumeBetween}
 */
proto.solom.VolumeBetween.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.VolumeBetween;
  return proto.solom.VolumeBetween.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.VolumeBetween} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.VolumeBetween}
 */
proto.solom.VolumeBetween.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.VolumeBetween.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.VolumeBetween.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.VolumeBetween} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.VolumeBetween.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMin();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getMax();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float min = 1;
 * @return {number}
 */
proto.solom.VolumeBetween.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.solom.VolumeBetween} returns this
 */
proto.solom.VolumeBetween.prototype.setMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float max = 2;
 * @return {number}
 */
proto.solom.VolumeBetween.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.solom.VolumeBetween} returns this
 */
proto.solom.VolumeBetween.prototype.setMax = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.solom.SubscribeUpdate.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.solom.SubscribeUpdate.UpdateOneofCase = {
  UPDATE_ONEOF_NOT_SET: 0,
  VOLUME: 2,
  OHLC: 3
};

/**
 * @return {proto.solom.SubscribeUpdate.UpdateOneofCase}
 */
proto.solom.SubscribeUpdate.prototype.getUpdateOneofCase = function() {
  return /** @type {proto.solom.SubscribeUpdate.UpdateOneofCase} */(jspb.Message.computeOneofCase(this, proto.solom.SubscribeUpdate.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.SubscribeUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.SubscribeUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.SubscribeUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.SubscribeUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    volume: (f = msg.getVolume()) && proto.solom.SubscribeUpdateVolume.toObject(includeInstance, f),
    ohlc: (f = msg.getOhlc()) && proto.solom.SubscribeUpdateOHLC.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.SubscribeUpdate}
 */
proto.solom.SubscribeUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.SubscribeUpdate;
  return proto.solom.SubscribeUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.SubscribeUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.SubscribeUpdate}
 */
proto.solom.SubscribeUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.solom.SubscribeUpdateVolume;
      reader.readMessage(value,proto.solom.SubscribeUpdateVolume.deserializeBinaryFromReader);
      msg.setVolume(value);
      break;
    case 3:
      var value = new proto.solom.SubscribeUpdateOHLC;
      reader.readMessage(value,proto.solom.SubscribeUpdateOHLC.deserializeBinaryFromReader);
      msg.setOhlc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.SubscribeUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.SubscribeUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.SubscribeUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.SubscribeUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVolume();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.solom.SubscribeUpdateVolume.serializeBinaryToWriter
    );
  }
  f = message.getOhlc();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.solom.SubscribeUpdateOHLC.serializeBinaryToWriter
    );
  }
};


/**
 * optional SubscribeUpdateVolume volume = 2;
 * @return {?proto.solom.SubscribeUpdateVolume}
 */
proto.solom.SubscribeUpdate.prototype.getVolume = function() {
  return /** @type{?proto.solom.SubscribeUpdateVolume} */ (
    jspb.Message.getWrapperField(this, proto.solom.SubscribeUpdateVolume, 2));
};


/**
 * @param {?proto.solom.SubscribeUpdateVolume|undefined} value
 * @return {!proto.solom.SubscribeUpdate} returns this
*/
proto.solom.SubscribeUpdate.prototype.setVolume = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.solom.SubscribeUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.solom.SubscribeUpdate} returns this
 */
proto.solom.SubscribeUpdate.prototype.clearVolume = function() {
  return this.setVolume(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.solom.SubscribeUpdate.prototype.hasVolume = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SubscribeUpdateOHLC ohlc = 3;
 * @return {?proto.solom.SubscribeUpdateOHLC}
 */
proto.solom.SubscribeUpdate.prototype.getOhlc = function() {
  return /** @type{?proto.solom.SubscribeUpdateOHLC} */ (
    jspb.Message.getWrapperField(this, proto.solom.SubscribeUpdateOHLC, 3));
};


/**
 * @param {?proto.solom.SubscribeUpdateOHLC|undefined} value
 * @return {!proto.solom.SubscribeUpdate} returns this
*/
proto.solom.SubscribeUpdate.prototype.setOhlc = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.solom.SubscribeUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.solom.SubscribeUpdate} returns this
 */
proto.solom.SubscribeUpdate.prototype.clearOhlc = function() {
  return this.setOhlc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.solom.SubscribeUpdate.prototype.hasOhlc = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.SubscribeUpdateVolume.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.SubscribeUpdateVolume.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.SubscribeUpdateVolume} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.SubscribeUpdateVolume.toObject = function(includeInstance, msg) {
  var f, obj = {
    ammId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mint: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ticker: jspb.Message.getFieldWithDefault(msg, 4, ""),
    baseVault: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    tokenPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    volume1m: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    isPumpFun: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    triggerValue: jspb.Message.getFieldWithDefault(msg, 9, 0),
    signature: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.SubscribeUpdateVolume}
 */
proto.solom.SubscribeUpdateVolume.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.SubscribeUpdateVolume;
  return proto.solom.SubscribeUpdateVolume.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.SubscribeUpdateVolume} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.SubscribeUpdateVolume}
 */
proto.solom.SubscribeUpdateVolume.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmmId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMint(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicker(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBaseVault(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTokenPrice(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVolume1m(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPumpFun(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTriggerValue(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.SubscribeUpdateVolume.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.SubscribeUpdateVolume.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.SubscribeUpdateVolume} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.SubscribeUpdateVolume.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmmId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMint();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTicker();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBaseVault();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getTokenPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getVolume1m();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getIsPumpFun();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getTriggerValue();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string amm_id = 1;
 * @return {string}
 */
proto.solom.SubscribeUpdateVolume.prototype.getAmmId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.solom.SubscribeUpdateVolume} returns this
 */
proto.solom.SubscribeUpdateVolume.prototype.setAmmId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string mint = 2;
 * @return {string}
 */
proto.solom.SubscribeUpdateVolume.prototype.getMint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.solom.SubscribeUpdateVolume} returns this
 */
proto.solom.SubscribeUpdateVolume.prototype.setMint = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.solom.SubscribeUpdateVolume.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.solom.SubscribeUpdateVolume} returns this
 */
proto.solom.SubscribeUpdateVolume.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string ticker = 4;
 * @return {string}
 */
proto.solom.SubscribeUpdateVolume.prototype.getTicker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.solom.SubscribeUpdateVolume} returns this
 */
proto.solom.SubscribeUpdateVolume.prototype.setTicker = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional double base_vault = 5;
 * @return {number}
 */
proto.solom.SubscribeUpdateVolume.prototype.getBaseVault = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.solom.SubscribeUpdateVolume} returns this
 */
proto.solom.SubscribeUpdateVolume.prototype.setBaseVault = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double token_price = 6;
 * @return {number}
 */
proto.solom.SubscribeUpdateVolume.prototype.getTokenPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.solom.SubscribeUpdateVolume} returns this
 */
proto.solom.SubscribeUpdateVolume.prototype.setTokenPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double volume_1m = 7;
 * @return {number}
 */
proto.solom.SubscribeUpdateVolume.prototype.getVolume1m = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.solom.SubscribeUpdateVolume} returns this
 */
proto.solom.SubscribeUpdateVolume.prototype.setVolume1m = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional bool is_pump_fun = 8;
 * @return {boolean}
 */
proto.solom.SubscribeUpdateVolume.prototype.getIsPumpFun = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.solom.SubscribeUpdateVolume} returns this
 */
proto.solom.SubscribeUpdateVolume.prototype.setIsPumpFun = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional int64 trigger_value = 9;
 * @return {number}
 */
proto.solom.SubscribeUpdateVolume.prototype.getTriggerValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.solom.SubscribeUpdateVolume} returns this
 */
proto.solom.SubscribeUpdateVolume.prototype.setTriggerValue = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string signature = 10;
 * @return {string}
 */
proto.solom.SubscribeUpdateVolume.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.solom.SubscribeUpdateVolume} returns this
 */
proto.solom.SubscribeUpdateVolume.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.SubscribeUpdateOHLC.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.SubscribeUpdateOHLC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.SubscribeUpdateOHLC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.SubscribeUpdateOHLC.toObject = function(includeInstance, msg) {
  var f, obj = {
    ammId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timeInterval: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pricesMap: (f = msg.getPricesMap()) ? f.toObject(includeInstance, proto.solom.OHLC.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.SubscribeUpdateOHLC}
 */
proto.solom.SubscribeUpdateOHLC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.SubscribeUpdateOHLC;
  return proto.solom.SubscribeUpdateOHLC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.SubscribeUpdateOHLC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.SubscribeUpdateOHLC}
 */
proto.solom.SubscribeUpdateOHLC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmmId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeInterval(value);
      break;
    case 3:
      var value = msg.getPricesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt64, jspb.BinaryReader.prototype.readMessage, proto.solom.OHLC.deserializeBinaryFromReader, 0, new proto.solom.OHLC());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.SubscribeUpdateOHLC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.SubscribeUpdateOHLC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.SubscribeUpdateOHLC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.SubscribeUpdateOHLC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmmId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimeInterval();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPricesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeInt64, jspb.BinaryWriter.prototype.writeMessage, proto.solom.OHLC.serializeBinaryToWriter);
  }
};


/**
 * optional string amm_id = 1;
 * @return {string}
 */
proto.solom.SubscribeUpdateOHLC.prototype.getAmmId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.solom.SubscribeUpdateOHLC} returns this
 */
proto.solom.SubscribeUpdateOHLC.prototype.setAmmId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 time_interval = 2;
 * @return {number}
 */
proto.solom.SubscribeUpdateOHLC.prototype.getTimeInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.solom.SubscribeUpdateOHLC} returns this
 */
proto.solom.SubscribeUpdateOHLC.prototype.setTimeInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * map<int64, OHLC> prices = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.solom.OHLC>}
 */
proto.solom.SubscribeUpdateOHLC.prototype.getPricesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.solom.OHLC>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.solom.OHLC));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.solom.SubscribeUpdateOHLC} returns this
 */
proto.solom.SubscribeUpdateOHLC.prototype.clearPricesMap = function() {
  this.getPricesMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.solom.OHLC.prototype.toObject = function(opt_includeInstance) {
  return proto.solom.OHLC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.solom.OHLC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.OHLC.toObject = function(includeInstance, msg) {
  var f, obj = {
    open: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    high: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    low: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    close: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.solom.OHLC}
 */
proto.solom.OHLC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.solom.OHLC;
  return proto.solom.OHLC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.solom.OHLC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.solom.OHLC}
 */
proto.solom.OHLC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOpen(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHigh(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLow(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setClose(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.solom.OHLC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.solom.OHLC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.solom.OHLC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.solom.OHLC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpen();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getHigh();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getLow();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getClose();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double open = 1;
 * @return {number}
 */
proto.solom.OHLC.prototype.getOpen = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.solom.OHLC} returns this
 */
proto.solom.OHLC.prototype.setOpen = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double high = 2;
 * @return {number}
 */
proto.solom.OHLC.prototype.getHigh = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.solom.OHLC} returns this
 */
proto.solom.OHLC.prototype.setHigh = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double low = 3;
 * @return {number}
 */
proto.solom.OHLC.prototype.getLow = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.solom.OHLC} returns this
 */
proto.solom.OHLC.prototype.setLow = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double close = 4;
 * @return {number}
 */
proto.solom.OHLC.prototype.getClose = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.solom.OHLC} returns this
 */
proto.solom.OHLC.prototype.setClose = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


goog.object.extend(exports, proto.solom);
